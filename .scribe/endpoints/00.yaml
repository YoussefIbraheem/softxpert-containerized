name: 'User Auth'
description: ''
endpoints:
  -
    httpMethods:
      - POST
    uri: api/register
    metadata:
      groupName: 'User Auth'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Register User'
      description: |-
        Register new user

        Access Level: N/A
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: ''
        required: true
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      email:
        name: email
        description: 'Must be a valid email address.'
        required: true
        example: zbailey@example.net
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      password:
        name: password
        description: 'Must match the regex /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*#?&^_-])[A-Za-z\d@$!%*#?&^_-]{8,}$/.'
        required: true
        example: '=iw/kXw)=az<mA)=52)=L%M{8,}'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      password_confirmation:
        name: password_confirmation
        description: ''
        required: true
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      name: architecto
      email: zbailey@example.net
      password: '=iw/kXw)=az<mA)=52)=L%M{8,}'
      password_confirmation: architecto
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"id":249,"name":"Ms. Elisabeth Okuneva","email":"gulgowski.asia@example.com","role":"user"}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/login
    metadata:
      groupName: 'User Auth'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Login User'
      description: |-
        Login a user and return a token.

        Access Level: N/A
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'Must be a valid email address. The <code>email</code> of an existing record in the users table.'
        required: true
        example: gbailey@example.net
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      password:
        name: password
        description: ''
        required: true
        example: '|]|{+-'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      email: gbailey@example.net
      password: '|]|{+-'
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":{"id":250,"name":"Mrs. Justina Gaylord","email":"lafayette.considine@example.com","role":"user"},"token":"5|kBPlXpDNHg491Yg5qTJr2jdTq9PL8L8Z8i0w4jYz22d20fdc"}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/logout
    metadata:
      groupName: 'User Auth'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Logout User'
      description: |-
        Log user out

        Access Level: N/A
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"message":"Logged out successfully"}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/user
    metadata:
      groupName: 'User Auth'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get Logged In User'
      description: |-
        get user's own data

        Access Level: N/A
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"id":251,"name":"Mr. Adriel Romaguera","email":"antonio24@example.net","role":"user"}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/user/update
    metadata:
      groupName: 'User Auth'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update User'
      description: |-
        Update user's own data such as (name ,  email , password)
        Password confirmation is required only when there is a new password entered

        Access Level: N/A
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: ''
        required: false
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      email:
        name: email
        description: 'Must be a valid email address.'
        required: false
        example: zbailey@example.net
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      password:
        name: password
        description: 'Must match the regex /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*#?&^_-])[A-Za-z\d@$!%*#?&^_-]{8,}$/.'
        required: false
        example: '=iw/kXw)=az<mA)=52)=L%M{8,}'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      password_confirmation:
        name: password_confirmation
        description: 'This field is required unless <code>password</code> is in <code>null</code>.'
        required: false
        example: null
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      name: architecto
      email: zbailey@example.net
      password: '=iw/kXw)=az<mA)=52)=L%M{8,}'
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"id":252,"name":"Mina Bauch","email":"okeefe.isidro@example.org","role":"user"}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/change-role
    metadata:
      groupName: 'User Auth'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Change User Role'
      description: |-
        Changes the user role from user to manager or vice versa.

        Access Level: Admin
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      role_name:
        name: role_name
        description: ''
        required: true
        example: user
        type: string
        enumValues:
          - manager
          - user
        exampleWasSpecified: false
        nullable: false
        custom: []
      user_id:
        name: user_id
        description: 'The <code>id</code> of an existing record in the users table.'
        required: false
        example: 16
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      role_name: user
      user_id: 16
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"id":253,"name":"Ms. Elisabeth Okuneva","email":"idickens@example.org","role":"user"}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/users
    metadata:
      groupName: 'User Auth'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get Users'
      description: |-
        get list of users

        Access Level : Manager
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '[{"id":254,"name":"Mya DuBuque","email":"breitenberg.gilbert@example.com","role":"user"},{"id":255,"name":"Morgan Hirthe","email":"dare.emelie@example.com","role":"user"}]'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/users/{id}'
    metadata:
      groupName: 'User Auth'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get User'
      description: |-
        Get a selected user depending on the id

        Access Level: Manager
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: "searched user's id"
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"id":256,"name":"Prof. Mina Bauch","email":"ztromp@example.org","role":"user"}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
